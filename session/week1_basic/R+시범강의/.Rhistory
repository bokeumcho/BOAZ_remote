a <- 25
b <- "Boaz"
c <- FALSE
TRUE & TRUE
TRUE & FALSE
TRUE | TRUE
TRUE | FALSE
class(a)
class(b)
class(c)
ls()               # 현재 생성된 변수들을 보여줌
rm(a) ## 특정 변수 제거
rm( list = ls() )  # 모든 변수 제거
rm( ls() )
sex <- factor ("m", level = c("m", "f"))  # 일반적으로 첫번째 argument는 데이터, 그 뒤는 옵션 (?factor 참조)
# 옵션 이름을 안 쓰고 순서만 맞춰도 됨
sex
class(sex)  # argument가 벡터일 때는 값의 타입(numeric, character, logical 등), 그 외는 데이터 타입(factor, matrix, list, data.frame 등) 반환
# list 내의 데이터 접근
BigData$"기획" # x라는 list 안의 "기획"이라는 데이터를 가져옴
x
BigData <- list ( "기획" = c("준현","혜원"), "운영지원" =c("시은","지연"), aaa = c(1,2,3))  # character 벡터와 numeric 벡터 혼합
x
A[1, ]  # 1행을 모두 가져옴
A <- matrix( 1:6 , nrow = 2 )           # nrow : 행의 개수, ncol : 열의 개수 (둘 중 하나만 쓰면 됨)
A <- matrix( 1:6 , nrow = 2, byrow=T )  # byrow=T : 행부터 채우기 (T=TRUE)
A
B <- matrix(1:6, nrow=3)
df <- data.frame( x = c(1, 2, 3, 4, 5), y = c(2, 4, 6, 8, 10), z = c('M', 'F', 'M', 'F', 'M') )
df$yunsik <- c(1,2,3,4,5)
df
df$x     # list와 같은 접근
df[,1]   # matrix와 같은 접근
df[1,2]
df[,"x"]
complete.cases(df)  # 각 행이 NA를 포함하고 있지 않는지 판별
df[2,2] <- NA
complete.cases(df)  # 각 행이 NA를 포함하고 있지 않는지 판별
na.omit(df)         # NA가 포함된 항을 제거
colnames(df)<-c("연식","강민","소현","지원")
rownames(df)<- c("a","b","c","d","e")
a = 4
if(a == 13){
print('true')
print("hello")
}else{
print('false')
print('bye')
}
x=1:10
ifelse(x%%2 == 0, "even", "odd")
d <- data.frame(x=c(1, 2, 3, 4, 5) , y=c("a", "b", "c", "d", "e"))
d[d$x %% 2 == 0, ]
f <- function(x) {
if (x==1) {
return("T")
} else {
return("F")
}
}
f(1)
f(2)
fibo = function(n){
if(n == 1 | n == 2){
return(1)
}
else{
return(fibo(n - 1) + fibo(n - 2))
}}
fibo(4)
fibo2 <- function(n,x1,x2){
for (k in 3:n){
x3<-x1+x2
x1<-x2
x2<-x3
}
return(x3)
}
fibo2(3,1,1)
fibo2(4,1,2)
fibo2(5,1,2)
setwd("C:/Users/USER/Desktop/R+시범강의")
data<-read.csv("final2.csv")
install.packages("shiny")
install.packages("leaflet")
install.packages("dplyr")
library(dplyr)
library(leaflet)
library(shiny)
data
ui<-fluidPage(
# Application title
titlePanel("yunsik card expense"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("month", "Choose a month:",
min=0,max=12,value=c(11,12)),
hr(),
sliderInput("time",
"time 0 to 24",
min = 0,  max = 24, value=c(6,20)),
sliderInput("expense",
"Price:",
min = 0,  max = 60000,  value = c(0,10000)),
actionButton("update", "Click me")
),
mainPanel(
leafletOutput("mymap"),
p(),
# Output: Header + summary of distribution ----
h4("Summary"),
verbatimTextOutput("summary")
)))
server <- function(input, output) {
yunsikus <- eventReactive(input$update, {
minmonth<-input$month[1]
maxmonth<-input$month[2]
minexpense<- input$expense[1]
maxexpense<-input$expense[2]
mintime<- input$time[1]
maxtime<- input$time[2]
m<-data%>%
filter(
Expense>=minexpense,
Expense<=maxexpense,
Month>=minmonth,
Month<=maxmonth,
Hour>=mintime,
Hour<=maxtime)
m<-as.data.frame(m)
m
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(lat = yunsikus()$lat, lng = yunsikus()$lon, popup=paste("장소 : ", yunsikus()$location,"<br>","금액 : ",yunsikus()$Expense,"<br>","시간 : ",yunsikus()$Hour)) })
output$summary <- renderPrint({
hahaha<-data.frame(lo=yunsikus()$location,ex=yunsikus()$Expense)
rrrr<-aggregate(hahaha$ex,by=list(hahaha$lo),sum)
colnames(rrrr) <-c("location","Total Expense")
rrrr
})}
shinyApp(ui=ui,server=server)
